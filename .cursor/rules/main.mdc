---
description: React best practices and patterns for modern web applications
alwaysApply: false
---

## Project Description
This is a portfolio website for a ux/ui graphic designer.The website is fully minimalist and artistic.

- **Website Structure**
  - The website is built with React and Tailwind CSS.
  - The website is fully responsive and works on all devices.
  - The website is built with a minimalistic and super artistic design.
  - The website consist of three main pages:
    - Home (Landing Page) with a hero section, a services section, a preview gallery section, a projects section, a contact section in footer
    - Projects section is the /projects/:id for the project detail page
    - Admin Dashboard is the /admin dashboard page that for the super admin to manage the website content update edit and delete the content.

- **Tech Stack**
  - React 19.1.8
  - Tailwind CSS 4.1.11
  - Supabase 2.31.8
  - Shadcn UI 1.1.1
  - Framer Motion 12.23.6
  - Lucide React 0.525.0
  - React Hook Form 7.54.2
  - Wouter 3.7.1
  - Zod 3.25.76
  - Biome 2.0.6
  - Sonner 0.8.2
  - Tailwind Merge 3.3.1
  - Tailwind Animate CSS 1.3.5
  - Vite 5.4.19
  - Vite Prerender Plugin 0.5.11



- **Project Structure**
    - src/components/
    - src/pages/
    - src/lib/
    - src/types/
    - src/hooks/
    - src/utils/
    - src/styles/   



## Code Quality & Architecture
- Always prefer simple solutions over complex ones
- Avoid code duplication - check for similar functionality elsewhere in codebase before implementing
- Keep files under 400-600 lines - refactor when approaching this limit (adjusted for extension complexity)
- Maintain clean codebase organization with clear file and folder structure
- Group imports logically (third-party, then local)
- Preserve existing event-driven architecture patterns
- Use biome for linting and formatting
- Use bun for package management
- Do not use comments in the code unless it is a very complex logic or a very complex function or a very complex component.
- Each component should be a single file and should be named like the component name do not have multiple components in a component file.
- For the reusable logic create a custom hook and use it in the component and do not create a custom hook for every single logic for the functions create a file inside libs folder and use it in the component.
- Components should be clean and focused and should not have any complex logic inside the component



# React Best Practices

## Component Structure
- Use functional components over class components
- Keep components small and focused
- Extract reusable logic into custom hooks
- Use composition over inheritance
- Implement proper prop types with TypeScript
- Split large components into smaller, focused ones

## Hooks
- Follow the Rules of Hooks
- Use custom hooks for reusable logic
- Keep hooks focused and simple
- Use appropriate dependency arrays in useEffect
- Implement cleanup in useEffect when needed
- Avoid nested hooks

## State Management
- Use useState for local component state
- Implement useReducer for complex state logic
- Use Context API for shared state
- Keep state as close to where it's used as possible
- Avoid prop drilling through proper state management
- Use state management libraries only when necessary

## Performance
- Implement proper memoization (useMemo, useCallback)
- Use React.memo for expensive components
- Avoid unnecessary re-renders
- Implement proper lazy loading
- Use proper key props in lists
- Profile and optimize render performance

## Forms
- Use react-hook-form for form handling
- Use zod for form validation
- Use controlled components for form inputs
- Implement proper form validation
- Handle form submission states properly
- Show appropriate loading and error states
- Use form libraries for complex forms
- Implement proper accessibility for forms

## Error Handling
- Implement Error Boundaries
- Handle async errors properly
- Show user-friendly error messages
- Implement proper fallback UI
- Log errors appropriately
- Handle edge cases gracefully


## Accessibility
- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation
- Test with screen readers
- Handle focus management
- Provide proper alt text for images

## Code Organization
- Group related components together
- Use proper file naming conventions
- Implement proper directory structure
- Keep styles close to components
- Use proper imports/exports
- Document complex component logic 