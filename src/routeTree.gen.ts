/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as ProjectsSlugRouteImport } from './routes/projects/$slug'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as AdminProjectsRouteImport } from './routes/admin/projects'
import { Route as AdminImagesRouteImport } from './routes/admin/images'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const ProjectsSlugRoute = ProjectsSlugRouteImport.update({
  id: '/projects/$slug',
  path: '/projects/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminProjectsRoute = AdminProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminImagesRoute = AdminImagesRouteImport.update({
  id: '/images',
  path: '/images',
  getParentRoute: () => AdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/admin/images': typeof AdminImagesRoute
  '/admin/projects': typeof AdminProjectsRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/projects/$slug': typeof ProjectsSlugRoute
  '/admin/': typeof AdminIndexRoute
  '/projects': typeof ProjectsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin/images': typeof AdminImagesRoute
  '/admin/projects': typeof AdminProjectsRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/projects/$slug': typeof ProjectsSlugRoute
  '/admin': typeof AdminIndexRoute
  '/projects': typeof ProjectsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/admin/images': typeof AdminImagesRoute
  '/admin/projects': typeof AdminProjectsRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/projects/$slug': typeof ProjectsSlugRoute
  '/admin/': typeof AdminIndexRoute
  '/projects/': typeof ProjectsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/about'
    | '/admin/images'
    | '/admin/projects'
    | '/auth/sign-in'
    | '/projects/$slug'
    | '/admin/'
    | '/projects'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/admin/images'
    | '/admin/projects'
    | '/auth/sign-in'
    | '/projects/$slug'
    | '/admin'
    | '/projects'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/about'
    | '/admin/images'
    | '/admin/projects'
    | '/auth/sign-in'
    | '/projects/$slug'
    | '/admin/'
    | '/projects/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  AuthSignInRoute: typeof AuthSignInRoute
  ProjectsSlugRoute: typeof ProjectsSlugRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/projects/$slug': {
      id: '/projects/$slug'
      path: '/projects/$slug'
      fullPath: '/projects/$slug'
      preLoaderRoute: typeof ProjectsSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/projects': {
      id: '/admin/projects'
      path: '/projects'
      fullPath: '/admin/projects'
      preLoaderRoute: typeof AdminProjectsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/images': {
      id: '/admin/images'
      path: '/images'
      fullPath: '/admin/images'
      preLoaderRoute: typeof AdminImagesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
  }
}

interface AdminRouteRouteChildren {
  AdminImagesRoute: typeof AdminImagesRoute
  AdminProjectsRoute: typeof AdminProjectsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminImagesRoute: AdminImagesRoute,
  AdminProjectsRoute: AdminProjectsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  AuthSignInRoute: AuthSignInRoute,
  ProjectsSlugRoute: ProjectsSlugRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
